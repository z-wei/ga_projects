{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PROBLEM STATEMENT"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. To automate the labelling process for school's expenditure items so that we can more easily compare school's expenditure against one another to improve their performance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ADMIN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy.stats as stats\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "# pd.options.display.max_rows = 999\n",
    "# pd.options.display.max_columns = 999\n",
    "\n",
    "route = '/Users/zhiwei/Documents/zhiwei_folder/data_science_career/general_assembly_course/class/downloads_github_enterprise/projects/capstone/schoolbudget_dataset/dataset'\n",
    "df = pd.read_csv(route + '/TrainingData.csv')\n",
    "\n",
    "df.drop('Unnamed: 0', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  INSPECTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(400277, 25)\n",
      "========================================\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 400277 entries, 0 to 400276\n",
      "Data columns (total 25 columns):\n",
      "Function                  400277 non-null object\n",
      "Use                       400277 non-null object\n",
      "Sharing                   400277 non-null object\n",
      "Reporting                 400277 non-null object\n",
      "Student_Type              400277 non-null object\n",
      "Position_Type             400277 non-null object\n",
      "Object_Type               400277 non-null object\n",
      "Pre_K                     400277 non-null object\n",
      "Operating_Status          400277 non-null object\n",
      "Object_Description        375493 non-null object\n",
      "Text_2                    88217 non-null object\n",
      "SubFund_Description       306855 non-null object\n",
      "Job_Title_Description     292743 non-null object\n",
      "Text_3                    109152 non-null object\n",
      "Text_4                    53746 non-null object\n",
      "Sub_Object_Description    91603 non-null object\n",
      "Location_Description      162054 non-null object\n",
      "FTE                       126071 non-null float64\n",
      "Function_Description      342195 non-null object\n",
      "Facility_or_Department    53886 non-null object\n",
      "Position_Extra            264764 non-null object\n",
      "Total                     395722 non-null float64\n",
      "Program_Description       304660 non-null object\n",
      "Fund_Description          202877 non-null object\n",
      "Text_1                    292285 non-null object\n",
      "dtypes: float64(2), object(23)\n",
      "memory usage: 76.3+ MB\n",
      "None\n",
      "========================================\n",
      "number of data types in my data set:  2\n",
      "========================================\n",
      "                 FTE         Total\n",
      "count  126071.000000  3.957220e+05\n",
      "mean        0.426794  1.310586e+04\n",
      "std         0.573576  3.682254e+05\n",
      "min        -0.087551 -8.746631e+07\n",
      "25%         0.000792  7.379770e+01\n",
      "50%         0.130927  4.612300e+02\n",
      "75%         1.000000  3.652662e+03\n",
      "max        46.800000  1.297000e+08\n",
      "========================================\n"
     ]
    }
   ],
   "source": [
    "df = df[:]\n",
    "\n",
    "print(df.shape)\n",
    "print('='*40)\n",
    "\n",
    "#only 2 features which are float objects (1) FTE:Full Time Employee (2) Total\n",
    "print(df.info())\n",
    "print('='*40)\n",
    "\n",
    "print('number of data types in my data set: ', df.dtypes.nunique())\n",
    "print('='*40)\n",
    "\n",
    "print(df.describe())\n",
    "print('='*40)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.63,50000,'0 = not full time, 1 = full time')"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#setting up FTE column to plot\n",
    "fte = df['FTE'] = df['FTE'].apply(lambda x: 1 if x > 1 else (0 if x < 0 else x)).dropna()\n",
    "\n",
    "#setting up the figure\n",
    "fig, (ax1, ax2) = plt.subplots(2,1, figsize=(16,8))\n",
    "fig.subplots_adjust(hspace=0.7)\n",
    "\n",
    "#setting up axis1\n",
    "fte.plot(kind='hist', ax=ax1, label='0 = not full time, 1 = full time')\n",
    "ax1.set_title('Distribution of employee full-time %', size=20)\n",
    "ax1.set_xlabel('% of full-time', size=20)\n",
    "ax1.set_ylabel('num employees', size=20)\n",
    "ax1.legend(fontsize='x-large')\n",
    "\n",
    "#axis2\n",
    "fte.plot(kind='hist', ax=ax2, color='orange')\n",
    "ax2.set_title('Distribution of employee full-time %', size=20)\n",
    "ax2.set_xlabel('% of full-time', size=20)\n",
    "ax2.set_ylabel('num employees', size=20)\n",
    "ax2.text(0.63, 50000, '0 = not full time, 1 = full time', size=20, bbox=dict(facecolor='red', alpha=0.5))\n",
    "\n",
    "    ####REMARKS####\n",
    "#.plot is a pandas method whereby the visualization does not appear in a window. This makes the appearance of the\n",
    "#charts appealing. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    3.957220e+05\n",
      "mean     1.706067e+04\n",
      "std      3.680634e+05\n",
      "min      0.000000e+00\n",
      "25%      1.290962e+02\n",
      "50%      6.531659e+02\n",
      "75%      4.571945e+03\n",
      "max      1.297000e+08\n",
      "Name: Total, dtype: float64\n",
      "========================================\n",
      "NOTE: scale is 1e8, which is 100 million - 1e6 is 1 million, 1e7 is 10 million and 1e8 is 100 million\n",
      "========================================\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#change negative to postive - assumed negative is wrongly labelled\n",
    "df['Total'] = df['Total'].apply(lambda x: abs(x) if x <0 else x)\n",
    "\n",
    "#df.describe()\n",
    "print(df['Total'].describe())\n",
    "\n",
    "#plot expenditure distribution\n",
    "df['Total'].plot(kind='hist', figsize=(16,8))\n",
    "plt.title('Distribution of Total Expenditure', size=20)\n",
    "plt.xlabel('Expenditure', size=20)\n",
    "plt.ylabel('Frequency', size=20)\n",
    "print('='*40)\n",
    "\n",
    "print('NOTE: scale is 1e8, which is 100 million - 1e6 is 1 million, 1e7 is 10 million and 1e8 is 100 million')\n",
    "print('='*40)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### log 'Total' to see distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda2/envs/py36/lib/python3.6/site-packages/matplotlib/axes/_axes.py:6462: UserWarning: The 'normed' kwarg is deprecated, and has been replaced by the 'density' kwarg.\n",
      "  warnings.warn(\"The 'normed' kwarg is deprecated, and has been \"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Frequency')"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "#create axis for subplots, and state figsize\n",
    "fig, (ax1, ax2) = plt.subplots(2,1, figsize=(16,10))\n",
    "fig.subplots_adjust(hspace=0.7)\n",
    "\n",
    "#manipulate data to plot\n",
    "logtotal = df['Total'].apply(lambda x: math.log(x) if x > 0 else x).dropna()\n",
    "\n",
    "#plotting from seaborn\n",
    "sns.distplot(logtotal, ax=ax1, color='green')\n",
    "ax1.set_title('Distribution of log Expenditure', size=20)\n",
    "ax1.set_xlabel('Expentiture', size=20)\n",
    "ax1.set_ylabel('Frequency', size=20)\n",
    "\n",
    "#plotting from padas for comparision\n",
    "logtotal.plot(kind='hist', bins=50, ax=ax2)\n",
    "ax2.set_title('Distribution of log Expenditure', size=20)\n",
    "ax2.set_xlabel('Expentiture', size=20)\n",
    "ax2.set_ylabel('Frequency', size=20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(36.625,0.5,'Frequency')"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#first 50,000 values are below \n",
    "fig, (ax1,ax2,ax3,ax4) = plt.subplots(4,1)\n",
    "fig.subplots_adjust(hspace=2)\n",
    "fig.tight_layout()\n",
    "\n",
    "\n",
    "df['Total'].sort_values()[:100000].plot(kind='hist', figsize=(16,8), color='c', ax=ax1)\n",
    "ax1.set_title('100,000 data points', size=20)\n",
    "ax1.set_xlabel('Expenditure', size=20)\n",
    "ax1.set_ylabel('Frequency', size=20)\n",
    "\n",
    "df['Total'].sort_values()[:200000].plot(kind='hist', figsize=(16,8), color='m', ax=ax2)\n",
    "ax2.set_title('200,000 data points', size=20)\n",
    "ax2.set_xlabel('Expenditure', size=20)\n",
    "ax2.set_ylabel('Frequency', size=20)\n",
    "\n",
    "df['Total'].sort_values()[:30000].plot(kind='hist', figsize=(16,8), color='y', ax=ax3)\n",
    "ax3.set_title('300,000 data points', size=20)\n",
    "ax3.set_xlabel('Expenditure', size=20)\n",
    "ax3.set_ylabel('Frequency', size=20)\n",
    "\n",
    "df['Total'].sort_values()[:400000].plot(kind='hist', figsize=(16,8), color='k', ax=ax4)\n",
    "ax4.set_title('400,000 data points', size=20)\n",
    "ax4.set_xlabel('Expenditure', size=20)\n",
    "ax4.set_ylabel('Frequency', size=20)\n",
    "\n",
    "# plt color: ‘b’\tblue ‘g’\tgreen ‘r’\tred ‘c’\tcyan ‘m’\tmagenta ‘y’\tyellow ‘k’\tblack ‘w’\twhite"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "character\tcolor\n",
    "‘b’\tblue\n",
    "‘g’\tgreen\n",
    "‘r’\tred\n",
    "‘c’\tcyan\n",
    "‘m’\tmagenta\n",
    "‘y’\tyellow\n",
    "‘k’\tblack\n",
    "‘w’\twhite"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Number of unique values')"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#organize columns into labels and non-labels\n",
    "LABELS = df.columns.values[0:9]\n",
    "NON_LABELS = [c for c in df.columns if c not in LABELS]\n",
    "\n",
    "#figure\n",
    "fig, ax = plt.subplots(1,1, figsize=(16,8))\n",
    "\n",
    "#nunique is a series method.Apply to each series.\n",
    "nunique_labels = df[LABELS].apply(lambda x: x.nunique())\n",
    "nunique_labels.plot(kind='barh',ax=ax)\n",
    "\n",
    "ax.set_xlabel('Labels')\n",
    "ax.set_ylabel('Number of unique values')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LOGISTIC REGRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy.stats as stats\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "#pd.options.display.max_rows = 999\n",
    "#pd.options.display.max_columns = 999\n",
    "\n",
    "route = '/Users/zhiwei/Documents/zhiwei_folder/data_science_career/general_assembly_course/class/downloads_github_enterprise/projects/capstone/schoolbudget_dataset/dataset'\n",
    "df = pd.read_csv(route + '/TrainingData.csv')\n",
    "df = df.iloc[:100000]\n",
    "df.drop('Unnamed: 0', axis=1, inplace=True)\n",
    "\n",
    "#some data cleaning\n",
    "df['FTE'] = df['FTE'].apply(lambda x: 1 if x > 1 else abs(x))\n",
    "df['Total'] = df['Total'].apply(lambda x: abs(x) if x <0 else x)\n",
    "\n",
    "#column names organizing\n",
    "numeric_col_names = ['FTE','Total']\n",
    "labels_col_names = df.columns.values[0:10].tolist()\n",
    "text_col_names = [c for c in df.columns if c not in (numeric_col_names + labels_col_names)]\n",
    "non_labels_col_names = [c for c in df.columns if c not in labels_col_names]\n",
    "\n",
    "numeric_df = df[numeric_col_names].copy()\n",
    "labels_df = df[labels_col_names].copy()\n",
    "text_df = df[text_col_names].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def combine_text_columns(data_frame, to_drop=numeric_col_names + labels_col_names):\n",
    "    \"\"\" converts all text in each row of data_frame to single vector \"\"\"\n",
    "    \n",
    "    # Drop non-text columns that are in the df\n",
    "    to_drop = set(to_drop) & set(data_frame.columns.tolist())\n",
    "    text_data = data_frame.drop(to_drop, axis=1)\n",
    "    \n",
    "    # Replace nans with blanks\n",
    "    text_data.fillna(\"\", inplace=True)\n",
    "    \n",
    "    # Join all text items in a row that have a space in between\n",
    "    return text_data.apply(lambda x: \" \".join(x), axis=1)\n",
    "\n",
    "from warnings import warn\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "def multilabel_sample(y, size=1000, min_count=0, seed=None):\n",
    "    \"\"\" Takes a matrix of binary labels `y` and returns\n",
    "        the indices for a sample of size `size` if\n",
    "        `size` > 1 or `size` * len(y) if size =< 1.\n",
    "        The sample is guaranteed to have > `min_count` of\n",
    "        each label.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        if (np.unique(y).astype(int) != np.array([0, 1])).all():\n",
    "            raise ValueError()\n",
    "    except (TypeError, ValueError):\n",
    "        raise ValueError('multilabel_sample only works with binary indicator matrices')\n",
    "\n",
    "    if (y.sum(axis=0) < min_count).any():\n",
    "        raise ValueError('Some classes do not have enough examples. Change min_count if necessary.')\n",
    "\n",
    "    if size <= 1:\n",
    "        size = np.floor(y.shape[0] * size)\n",
    "\n",
    "    if y.shape[1] * min_count > size:\n",
    "        msg = \"Size less than number of columns * min_count, returning {} items instead of {}.\"\n",
    "        warn(msg.format(y.shape[1] * min_count, size))\n",
    "        size = y.shape[1] * min_count\n",
    "\n",
    "    rng = np.random.RandomState(seed if seed is not None else np.random.randint(1))\n",
    "\n",
    "    if isinstance(y, pd.DataFrame):\n",
    "        choices = y.index\n",
    "        y = y.values\n",
    "    else:\n",
    "        choices = np.arange(y.shape[0])\n",
    "\n",
    "    sample_idxs = np.array([], dtype=choices.dtype)\n",
    "\n",
    "    # first, guarantee > min_count of each label\n",
    "    for j in range(y.shape[1]):\n",
    "        label_choices = choices[y[:, j] == 1]\n",
    "        label_idxs_sampled = rng.choice(label_choices, size=min_count, replace=False)\n",
    "        sample_idxs = np.concatenate([label_idxs_sampled, sample_idxs])\n",
    "\n",
    "    sample_idxs = np.unique(sample_idxs)\n",
    "\n",
    "    # now that we have at least min_count of each, we can just random sample\n",
    "    sample_count = int(size - sample_idxs.shape[0])\n",
    "\n",
    "    # get sample_count indices from remaining choices\n",
    "    remaining_choices = np.setdiff1d(choices, sample_idxs)\n",
    "    remaining_sampled = rng.choice(remaining_choices,\n",
    "                                   size=sample_count,\n",
    "                                   replace=False)\n",
    "\n",
    "    return np.concatenate([sample_idxs, remaining_sampled])\n",
    "\n",
    "\n",
    "def multilabel_sample_dataframe(df, labels, size, min_count=0, seed=None):\n",
    "    \"\"\" Takes a dataframe `df` and returns a sample of size `size` where all\n",
    "        classes in the binary matrix `labels` are represented at\n",
    "        least `min_count` times.\n",
    "    \"\"\"\n",
    "    idxs = multilabel_sample(labels, size=size, min_count=min_count, seed=seed)\n",
    "    return df.loc[idxs]\n",
    "\n",
    "\n",
    "def multilabel_train_test_split(X, Y, size, min_count=0, seed=None):\n",
    "    \"\"\" Takes a features matrix `X` and a label matrix `Y` and\n",
    "        returns (X_train, X_test, Y_train, Y_test) where all\n",
    "        classes in Y are represented at least `min_count` times.\n",
    "    \"\"\"\n",
    "    index = Y.index if isinstance(Y, pd.DataFrame) else np.arange(Y.shape[0])\n",
    "\n",
    "    test_set_idxs = multilabel_sample(Y, size=size, min_count=min_count, seed=seed)\n",
    "    train_set_idxs = np.setdiff1d(index, test_set_idxs)\n",
    "\n",
    "    test_set_mask = index.isin(test_set_idxs)\n",
    "    train_set_mask = ~test_set_mask\n",
    "\n",
    "    return (X[train_set_mask], X[test_set_mask], Y[train_set_mask], Y[test_set_mask])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import FunctionTransformer\n",
    "from sklearn.preprocessing import FunctionTransformer\n",
    "\n",
    "# Get the dummy encoding of the labels\n",
    "dummy_labels = pd.get_dummies(df[labels_col_names])\n",
    "\n",
    "# Split into training and test sets\n",
    "X_train, X_test, y_train, y_test = multilabel_train_test_split(df[non_labels_col_names],\n",
    "                                                               dummy_labels,\n",
    "                                                               0.2, \n",
    "                                                               seed=123)\n",
    "\n",
    "# Preprocess the text data: get_text_data\n",
    "get_text_data = FunctionTransformer(combine_text_columns, validate=False)\n",
    "\n",
    "# Preprocess the numeric data: get_numeric_data\n",
    "get_numeric_data = FunctionTransformer(lambda x: x[numeric_col_names], validate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import naive_bayes, svm\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.pipeline import Pipeline, FeatureUnion\n",
    "from sklearn.preprocessing import Imputer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 131 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 179 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 183 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 223 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 231 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 245 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 263 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 284 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 309 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 351 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 356 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 383 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 401 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 444 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 467 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 502 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 505 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 512 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 535 is present in all training examples.\n",
      "  str(classes[c]))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Accuracy on budget dataset:  0.1349\n"
     ]
    }
   ],
   "source": [
    "# Complete the pipeline: pl\n",
    "pl = Pipeline([\n",
    "        ('union', FeatureUnion(\n",
    "            transformer_list = [\n",
    "                ('numeric_features', Pipeline([\n",
    "                    ('selector', get_numeric_data),\n",
    "                    ('imputer', Imputer())\n",
    "                ])),\n",
    "                ('text_features', Pipeline([\n",
    "                    ('selector', get_text_data),\n",
    "                    ('vectorizer', CountVectorizer())\n",
    "                ]))\n",
    "             ]\n",
    "        )),\n",
    "        ('clf', OneVsRestClassifier(LogisticRegression()))\n",
    "    ])\n",
    "\n",
    "# Fit to the training data\n",
    "pl.fit(X_train, y_train)\n",
    "\n",
    "# Compute and print accuracy\n",
    "accuracy = pl.score(X_test, y_test)\n",
    "print(\"\\nAccuracy on budget dataset: \", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NAIVE BAYES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### BernoulliNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 131 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 179 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 183 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 223 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 231 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 245 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 263 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 284 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 309 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 351 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 356 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 383 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 401 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 444 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 467 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 502 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 505 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 512 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 535 is present in all training examples.\n",
      "  str(classes[c]))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Accuracy on budget dataset:  0.0805\n"
     ]
    }
   ],
   "source": [
    "# Complete the pipeline: pl\n",
    "pl = Pipeline([\n",
    "        ('union', FeatureUnion(\n",
    "            transformer_list = [\n",
    "                ('numeric_features', Pipeline([\n",
    "                    ('selector', get_numeric_data),\n",
    "                    ('imputer', Imputer())\n",
    "                ])),\n",
    "                ('text_features', Pipeline([\n",
    "                    ('selector', get_text_data),\n",
    "                    ('vectorizer', CountVectorizer())\n",
    "                ]))\n",
    "             ]\n",
    "        )),\n",
    "        ('clf', OneVsRestClassifier(naive_bayes.BernoulliNB()))\n",
    "    ])\n",
    "\n",
    "# Fit to the training data\n",
    "pl.fit(X_train, y_train)\n",
    "\n",
    "# Compute and print accuracy\n",
    "accuracy = pl.score(X_test, y_test)\n",
    "print(\"\\nAccuracy on budget dataset: \", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### naive_bayes.MultinomialNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 131 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 179 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 183 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 223 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 231 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 245 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 263 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 284 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 309 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 351 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 356 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 383 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 401 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 444 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 467 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 502 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 505 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 512 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 535 is present in all training examples.\n",
      "  str(classes[c]))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Accuracy on budget dataset:  0.01125\n"
     ]
    }
   ],
   "source": [
    "# Complete the pipeline: pl\n",
    "pl = Pipeline([\n",
    "        ('union', FeatureUnion(\n",
    "            transformer_list = [\n",
    "                ('numeric_features', Pipeline([\n",
    "                    ('selector', get_numeric_data),\n",
    "                    ('imputer', Imputer())\n",
    "                ])),\n",
    "                ('text_features', Pipeline([\n",
    "                    ('selector', get_text_data),\n",
    "                    ('vectorizer', CountVectorizer())\n",
    "                ]))\n",
    "             ]\n",
    "        )),\n",
    "        ('clf', OneVsRestClassifier(naive_bayes.MultinomialNB()))\n",
    "    ])\n",
    "\n",
    "# Fit to the training data\n",
    "pl.fit(X_train, y_train)\n",
    "\n",
    "# Compute and print accuracy\n",
    "accuracy = pl.score(X_test, y_test)\n",
    "print(\"\\nAccuracy on budget dataset: \", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### naive_bayes.MultinomialNB() with cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 114 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 125 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 131 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 136 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 179 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 220 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 225 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 251 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 258 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 259 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 260 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 263 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 284 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 285 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 325 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 338 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 355 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 357 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 370 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 385 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 391 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 398 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 437 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 442 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 475 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 479 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 482 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 502 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 505 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 512 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 524 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 542 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 554 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 119 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 120 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 121 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 157 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 161 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 174 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 183 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 211 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 223 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 224 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 231 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 235 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 243 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 245 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 246 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 283 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 328 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 331 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 332 is present in all training examples.\n",
      "  str(classes[c]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 351 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 356 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 367 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 381 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 383 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 395 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 459 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 468 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 473 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 493 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 494 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 499 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 533 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 544 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 567 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 569 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 116 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 127 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 149 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 155 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 163 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 196 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 257 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 276 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 282 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 286 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 304 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 309 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 320 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 401 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 407 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 463 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 467 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 501 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 552 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 562 is present in all training examples.\n",
      "  str(classes[c]))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.01055979 0.01068011 0.01164012]\n"
     ]
    }
   ],
   "source": [
    "# Complete the pipeline: pl\n",
    "pl = Pipeline([\n",
    "        ('union', FeatureUnion(\n",
    "            transformer_list = [\n",
    "                ('numeric_features', Pipeline([\n",
    "                    ('selector', get_numeric_data),\n",
    "                    ('imputer', Imputer())\n",
    "                ])),\n",
    "                ('text_features', Pipeline([\n",
    "                    ('selector', get_text_data),\n",
    "                    ('vectorizer', CountVectorizer())\n",
    "                ]))\n",
    "             ]\n",
    "        )),\n",
    "        ('clf', OneVsRestClassifier(naive_bayes.MultinomialNB()))\n",
    "    ])\n",
    "\n",
    "\n",
    "print (cross_val_score(pl, df[non_labels_col_names], dummy_labels, cv=3))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import naive_bayes, svm\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.pipeline import Pipeline, FeatureUnion\n",
    "from sklearn.preprocessing import Imputer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 131 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 179 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 183 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 223 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 231 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 245 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 263 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 284 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 309 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 351 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 356 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 383 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 401 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 444 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 467 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 502 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 505 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 512 is present in all training examples.\n",
      "  str(classes[c]))\n",
      "/anaconda2/envs/py36/lib/python3.6/site-packages/sklearn/multiclass.py:76: UserWarning: Label not 535 is present in all training examples.\n",
      "  str(classes[c]))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Accuracy on budget dataset:  0.19055\n"
     ]
    }
   ],
   "source": [
    "# Complete the pipeline: pl\n",
    "pl = Pipeline([\n",
    "        ('union', FeatureUnion(\n",
    "            transformer_list = [\n",
    "                ('numeric_features', Pipeline([\n",
    "                    ('selector', get_numeric_data),\n",
    "                    ('imputer', Imputer())\n",
    "                ])),\n",
    "                ('text_features', Pipeline([\n",
    "                    ('selector', get_text_data),\n",
    "                    ('vectorizer', CountVectorizer())\n",
    "                ]))\n",
    "             ]\n",
    "        )),\n",
    "        ('clf', OneVsRestClassifier(svm.LinearSVC()))\n",
    "    ])\n",
    "\n",
    "# Fit to the training data\n",
    "pl.fit(X_train, y_train)\n",
    "\n",
    "# Compute and print accuracy\n",
    "accuracy = pl.score(X_test, y_test)\n",
    "print(\"\\nAccuracy on budget dataset: \", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RANDOM FOREST CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Accuracy on budget dataset:  0.7249\n"
     ]
    }
   ],
   "source": [
    "# Edit model step in pipeline\n",
    "pl = Pipeline([\n",
    "        ('union', FeatureUnion(\n",
    "            transformer_list = [\n",
    "                ('numeric_features', Pipeline([\n",
    "                    ('selector', get_numeric_data),\n",
    "                    ('imputer', Imputer())\n",
    "                ])),\n",
    "                ('text_features', Pipeline([\n",
    "                    ('selector', get_text_data),\n",
    "                    ('vectorizer', CountVectorizer())\n",
    "                ]))\n",
    "             ]\n",
    "        )),\n",
    "        ('clf', RandomForestClassifier())\n",
    "    ])\n",
    "\n",
    "# Fit to the training data\n",
    "pl.fit(X_train, y_train)\n",
    "\n",
    "# Compute and print accuracy\n",
    "accuracy = pl.score(X_test, y_test)\n",
    "print(\"\\nAccuracy on budget dataset: \", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### with n_estimators = 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Accuracy on budget dataset:  0.7418\n"
     ]
    }
   ],
   "source": [
    "# Import RandomForestClassifier\n",
    "\n",
    "# Add model step to pipeline: pl\n",
    "pl = Pipeline([\n",
    "        ('union', FeatureUnion(\n",
    "            transformer_list = [\n",
    "                ('numeric_features', Pipeline([\n",
    "                    ('selector', get_numeric_data),\n",
    "                    ('imputer', Imputer())\n",
    "                ])),\n",
    "                ('text_features', Pipeline([\n",
    "                    ('selector', get_text_data),\n",
    "                    ('vectorizer', CountVectorizer())\n",
    "                ]))\n",
    "             ]\n",
    "        )),\n",
    "        ('clf', RandomForestClassifier(n_estimators=15))\n",
    "    ])\n",
    "\n",
    "# Fit to the training data\n",
    "pl.fit(X_train, y_train)\n",
    "\n",
    "# Compute and print accuracy\n",
    "accuracy = pl.score(X_test, y_test)\n",
    "print(\"\\nAccuracy on budget dataset: \", accuracy)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
